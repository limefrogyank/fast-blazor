@typeparam TItem
<fluent-data-grid generate-header=none
                  grid-template-columns=@GridTemplateColumns
                  @attributes="@AdditionalAttributes">
    @if (GenerateHeader != GenerateHeaderOptions.None)
    {
        DataGridRowType headerType = DataGridRowType.Header;
        if (GenerateHeader == GenerateHeaderOptions.Sticky)
            headerType = DataGridRowType.StickyHeader;

        <FluentDataGridRow RowType=headerType TItem=TItem>
            @{
                int gridColumn = 1;
                foreach (ColumnDefinition<TItem> column in ColumnDefinitions!)
                {
                    <FluentDataGridCell GridColumn=@(gridColumn++) CellType=DataGridCellType.ColumnHeader>
                    @if (HeaderCellTemplate != null)
                    {
                        @HeaderCellTemplate(column)
                    }
                    else
                    {
                        @column.Title
                    }
                    </FluentDataGridCell>
                }
            }
        </FluentDataGridRow>
    }

    @if (RowsData == null)
    {
        @ChildContent
    }
    else
    {
        int index = 1;
        foreach (TItem item in RowsData)
        {
            if (RowItemTemplate != null)
            {
                @RowItemTemplate(item)
            }
            else
            {
                <FluentDataGridRow GridTemplateColumns=@GridTemplateColumns ColumnDefinitions=@ColumnDefinitions RowIndex=@(index++) TItem=TItem RowData=@item />
            }
        }
    }
</fluent-data-grid>

@code
{
    // FAST Attributes
    [Parameter]
    public GenerateHeaderOptions? GenerateHeader { get; set; } = GenerateHeaderOptions.Default;

    [Parameter]
    public string? GridTemplateColumns { get; set; } = "";

    //FAST Properties
    [Parameter]
    public List<TItem>? RowsData { get; set; }

    [Parameter]
    public IEnumerable<ColumnDefinition<TItem>>? ColumnDefinitions { get; set; }

    [Parameter]
    public RenderFragment<ColumnDefinition<TItem>>? HeaderCellTemplate { get; set; } = null;
  
    [Parameter]
    public RenderFragment<TItem>? RowItemTemplate { get; set; } = null;

    // General Blazor parameters
    [Parameter]
    public RenderFragment? ChildContent { get; set; }


    [Parameter(CaptureUnmatchedValues = true)]
    public IDictionary<string, object>? AdditionalAttributes { get; set; }


}
